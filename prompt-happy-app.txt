
********* cursor intruction to use file prompt *****************
***start***

important!!

hello Cursor, use this file prompt by prompt.
i will give you validation to execute the next prompt.

each time i valide your code or fix a error modify this prompt for a best understanding for the next time.
this file will be use for many next project.

********* cursor intruction *****************
***end***



******* prompt 1 **************
title: context and work environment.
****start*********

You're a senior full-stack web developer with a perfect command of ReactJS for the front end.
On the backend, you have a perfect command of REST API, Adonis Framework and ExpressJS.

I want to create a front end development server for a traditional multi-page website using the 'vite' development server.
I need to create the folder and file architecture for this to work correctly.

The Vite server should be configured with React in vanilla mode.
This is NOT a single-page React application, but rather a traditional website that uses React only for mounting common components like navbar, footer, buttons, etc.

The project should support:
- Multiple HTML pages
- React components mounted within these pages
- A clean folder structure separating components, styles, and utilities
- Support for multilingual content (English and French)

Important folder structure notes:
- All source files should be inside the 'my-website' folder created by Vite
- React components should be in 'my-website/src/components'
- Styles should be in 'my-website/src/styles'
- Utility functions should be in 'my-website/src/utils'
- Static assets should be in 'my-website/public'
- HTML pages should be at the root of 'my-website'

Language structure:
- French version is the default and should be at the root of the project
- English version should be in the 'my-website/public/en/' directory
- The home page for English should be 'my-website/public/en/home.html'
- All React components that handle navigation must respect this structure
- All HTML files must include proper language attributes and alternate links

******* prompt 1**************
***end*********



******* prompt 2 **************
title: set vite architecture
****start*********

the server is working correctly my indexed page is displayed in the browser
Deletes existing files used to test the operation of the development server.
for example: app.jsx, app.css etc...

After setting up the Vite server with React, we need to:

1. Remove default Vite test files (counter.js, javascript.svg, style.css, etc.)
2. Create a proper directory structure:
   - src/components/ - For React components (Navbar, Footer, etc.)
   - src/styles/ - For CSS files
   - src/utils/ - For utility functions
   - public/ - For static assets
3. Create basic component files for Navbar and Footer
4. Set up a main CSS file with mobile-first approach

This will provide a clean starting point for our multi-page website.

******* prompt 2**************
***end*********




******* prompt 3**************
title: general structure
***start*********


I want to create a website for my future web development company.
It will be a multilingual site in French and English.
It will be totally responsive and created in 'mobile first'.

This website will contain the following pages:

french version:
-1- Accueil
-2- Qui suis je
-3- Prestations
-4- RÃ©alisations
-4- Contact
-5- Articles
-6- Connexion

english version:
-1- Home
-2- Who i am
-3- Services
-4- Achievements
-4- Contact
-5- Articles

***SEO***
Each page must comply scrupulously with 'white hat' SEO techniques.
Each html page must contain (non-exhaustive list):
-title and meta description tags
-Open Graph tags 
-canonical and alternate link tags
-geolocation tags
-shema.org srcript tags
-clean, descriptive urls


***positioning tags***
-tag script in last line of the head

***Language Structure***
- French version is the default and should be at the root of the project
- English version should be in the public/en/ directory
- The home page for English should be public/en/home.html
- All navigation should reflect this structure

For this prompt, we need to:

1. Create a base HTML template with all required SEO elements:
   - Meta tags (title, description)
   - Open Graph tags for social sharing
   - Canonical and alternate language links
   - Geolocation metadata
   - Schema.org structured data
   - Proper script positioning

2. Implement multilingual support:
   - French as default at root level
   - English version in public/en/ directory
   - Ensure proper language attributes in HTML tags
   - Add language switcher in the navigation
   - Use descriptive URLs for each language version

3. Ensure mobile-first responsive design:
   - Use responsive meta viewport tag
   - Implement mobile-first CSS
   - Test on various screen sizes

4. Create the basic structure for all required pages in both languages

Required pages to create:

French pages (in public/fr/):
- qui-suis-je.html
- prestations.html
- realisations.html
- contact.html
- articles.html
- connexion.html (French only, no English equivalent)

English pages (in public/en/):
- home.html
- about.html
- services.html
- achievements.html
- contact.html
- articles.html

French index.html should be at the root of the project.
Each page must include proper SEO elements, language attributes, and canonical/alternate links.

******* prompt 3**************
***end*********


******* prompt 4**************
title: build "connexion.html" page
***start*********

The 'connection' page will contain a form managed by the 'react-hook-form' library.

Structure of the form:
1- a password input type
2- an email input type
3- a button to submit the form

error handling:
- inputs will be checked using appropriate regEx.
-error messages will be displayed under the relevant input.
-two types of message will be available
 a) 'password/email required' if insufficient characters.
 b) 'password / email inavalid' if regEx not respected.
-http error management with the message 'an hhtp error has occurred'.
-error message 'invalid password or username'.

Additional features:
1. Password visibility toggle:
   - Add an eye icon button next to the password field
   - Clicking the icon toggles between showing and hiding the password
   - The eye icon should change appearance to indicate the current state

2. Form submission handling:
   - Disable the submit button when:
     a) There are validation errors in the form
     b) The form is currently being submitted
     c) The form is not valid
   - Show a loading state in the button during submission
   - Handle HTTP errors with appropriate messages

3. Toast notifications:
   - Display toast notifications for form submission results
   - Show success toast when login is successful
   - Show error toast for authentication failures
   - Show error toast for connection/HTTP errors
   - Toast should appear in the top-right corner with animation
   - Toast should automatically disappear after 5 seconds
   - Toast should have different styles based on message type (success/error)
   - Allow manual dismissal with a close button

4. Loading indicator:
   - Use react-loader-spinner library to show a loading overlay during form submission
   - Display a full-screen overlay with blur effect
   - Show a spinner animation in the center with loading text

style:
The form will be styled using SASS/SCSS:
   - Create a dedicated SCSS file for the login form
   - Use SCSS features like nesting, variables, and mixins
   - Organize styles in a modular way
   - Ensure responsive design for all screen sizes

After implementation:
- Check package.json to ensure all required dependencies are installed
- Verify that the SASS preprocessor is properly configured
- Ensure the form works correctly with the styling applied

******* prompt 4**************
***end*********


******* prompt 5**************
title: build the contact.html page
***start*********

The 'contact' page will contain a form managed by the 'react-hook-form' library.

Structure of the form:
1- a name input type
2- a first name input type
3- an email input type
4- a message input type
5- a button to submit the form
6- include a recaptcha

and the same features as the connexion.html page, the prompt number 4.

after submited the form, clean the form inputs.


******* prompt 5**************
***end*********


******* prompt 6**************
title: build a react navbar menu component responsive
***start********

-1- The navigation menu must be responsive.
-2- For screens less than 1000px wide, a burger-type menu icon will appear. When clicked, a vertical menu will appear on the left edge of the screen.
-3- above 1000px wide a horizontal menu will be visible, it will be placed on the right of the screen.
-4- The menu links will be underlined with a coloured line when hovered over.
-5- The link corresponding to the page consulted will change colour.
-6- The menu will be styled using SASS/SCSS.
-7- The menu will be in the src/components/Navbar/Navbar.jsx file.
-8- The menu will be in the src/styles/navbar.scss file.
-9- modify the existing Navbar.jsx file.
-10- use the link list in prompt 3.
-11- use the language list in prompt 3.
******* prompt 6**************
***end*********


******* prompt 7**************
title: create text for the home page
***start*********

******** start promtpt: 7.1 ********
   


-1- The first part will begin with an introduction that briefly explains the services I offer, the values I embody and the eco responsible way I code.
services offered: 
-custom website design
-mobile application design
-SEO optimisation
my values: 
-customer satisfaction
-eco design

Here is an example of an introduction, take inspiration from this text and modify it accordingly:
Welcome to CodyWeb
CodyWeb, the web agency that makes the difference
At Codyweb, we specialise in creating custom websites. Whether you need a showcase site, an e-commerce site or a complete overhaul, our team of experts is there to support you at every stage of your project.

We combine technical expertise with a passion for innovation to create websites, custom SaaS solutions and mobile applications that not only meet your needs, but set you apart in the marketplace.


******** end promtpt: 7.1 ********



******* prompt 7**************
***end*********

******* prompt 8 **************
title: create text for the "who i am" page
***start*********

the 'who i am' page should allow me to showcase myself, by explaining my passion for development, my values of commitment, respect for customers and their expectations.

A second part will describe the process of working with the client, i.e. gathering information, carrying out research, validating with the client, etc.....

a link to my linkedin profile should be included.

my logo and a photo of me will also be included.


******* prompt 8 **************
***end*********



******* prompt 9 **************
title: create text for the differents "services" page
***start*********


***start **** prompt 9.1 **************
page: "service Site-web"
********************************

the 'website service' page should develop the proposed activity in depth.

part A: nav bar
part B:
1-title: Tailor-made website
2- an introduction
3- a cta button leading to the contact form

part C:
1-presentation in the form of maps of the different websites I create: showcase site, ecommerce site, custom site.
2-each card will contain an image corresponding to the activity.
the card will contain a text that explains the purpose of the type of site concerned
3-at the bottom of the card, a button that leads to the contact form
example of boton text: 'need a showcase site, contact me'.

part D
a reminder of the eco-design and SEO optimisation that I carry out.

part E: Frequently asked questions FAQ
This part provides information to visitors on common questions they may have.
Example of questions: 
How much does it cost to create a website?

How long does it take to develop a website?


What types of site can you create?

Do you offer maintenance services once the site is online?

Will the site be optimised for search engine optimisation (SEO)?

Will the site be mobile and tablet friendly?

Will I be able to update the content myself?

What are the advantages of a bespoke site over a standard model?

Do you have any examples of sites you have created?

How is the site's performance measured once it's online?

What do I do if I need new features later on?

Insert an answer under each question

partF: footer

The whole page must be responsive and respect the templates we have defined.



*****end** prompt 9.1**************



****start *** prompt 9.2**************
page: "service application mobile"
********************************

realise the same page as on the prompt 9.1, but this time on 'mobile applications'.


******* prompt 9.2**************
***end*********

****start *** prompt 9.3**************
page: "service SEO"
********************************

realise the same page as on the prompt 9.1, but this time on 'SEO optimisation'.

****end** prompt 9.3**************




******* prompt 10 **************
title: create text and functionnalities for "articles" page
***start*********
the item page will display a list of items from the database.
1) each item in the list will be displayed in a card containing the following points:
 a) title
b) an image
c) a text extracted from the content of the article
d) category (mobile application or website, or seo...)

2) by default, a maximum of three articles per category will be retrieved when the page is loaded.

3) you can filter the articles by category (a fetch call will be made accordingly) and the new list will be displayed, including a select input to make the choice.

3) to avoid fetch calls to the api, the old list of articles must be stored somewhere. Maybe the 'localstorage' or a simple table, or something else.
It's up to you to use the simplest solution.

4) Maps should be focusable, either by using the tab key (accessibility), or by hovering over the mouse.
When you click on the card, you'll be redirected to the relevant article page.


5) The focus of the card must make it stand out from the others in terms of style. 




***end*********

******* prompt 11**************
title: build the "article" page
***start********

the 'article' page will display the complete article from the database.
As the articles may differ in terms of number of paragraphs and images, subtitle.....etc
It will be necessary to create the content dynamically according to the elements received from the database.
functionalities:
1) a menu must be integrated on the side of the article to allow navigation between the page's sub-headings (only for screens larger than 1000px)
2) buttons or arrows are required for:
-next article
-previous article
-back to article list

insert dynamically created content into a 'template' page


 
******* prompt 11**************
***end*********


******* prompt 12**************
title: build the api
***start********

for the api we're going to use the micro frameWork 'expressJS' that you're going to install in the existing 'backend' folder

1) create a robust http server.

2) create the different routes with 'expressRouter' that correspond to the front end. (page connexion, page contact, page articles, page article, recaptcha, ....)

3) you will create middlewere for :
-authentication with token
-validation of data from the front end

4) You will create controllers for:
 -send an email following 
-stoker in database articles and associated images


 
******* prompt 12**************
***end*********

******* prompt 12.1**************
title: Create a robust Express server setup
***start********

Create a robust server.js file for an Express application with the following features:

1) Proper separation of concerns:
   - Keep server configuration (port, HTTP server creation, error handling) in server.js
   - Move all Express app configuration (middleware, routes, etc.) to app.js

2) Implement comprehensive error handling:
   - Handle server startup errors (EACCES, EADDRINUSE)
   - Capture unhandled promise rejections
   - Capture uncaught exceptions
   - Ensure graceful server shutdown on errors

3) Use the Node.js http module to create the server:
   - Create a proper HTTP server using http.createServer()
   - Set up event listeners for 'error' and 'listening' events
   - Implement port normalization to handle different input formats

4) Add clear code organization with comments:
   - Group related functionality
   - Add descriptive comments for each section
   - Explain the purpose of utility functions

The server.js file should load environment variables first, then import the Express app from app.js, create and configure the HTTP server, set up error handlers, and finally start the server.

******* prompt 12.1**************
***end*********

******* prompt 12.2**************
title: Create a comprehensive Express app configuration with MariaDB
***start********

Create a well-structured app.js file for an Express application with the following features:

1) Implement essential security and performance middleware:
   - Use helmet for setting security HTTP headers
   - Configure CORS with a whitelist of allowed origins
   - Set up JSON and URL-encoded body parsing with size limits
   - Add request logging with Morgan
   - Implement HTTP response compression
   - Add rate limiting to prevent abuse

2) Configure proper CORS settings:
   - Create a whitelist of allowed origins (development and production)
   - Implement a function-based origin validator
   - Allow credentials for authenticated requests
   - Handle requests with no origin (like mobile apps, curl)

3) Set up file upload handling:
   - Create an uploads directory if it doesn't exist
   - Implement proper error handling for file operations

4) Configure MariaDB database connection:
   - Use mysql2 package for better performance and promise support
   - Create a connection pool for efficient database access
   - Implement proper error handling for database operations
   - Create SQL models instead of MongoDB schemas

5) Organize API routes:
   - Mount all routes under the /api prefix
   - Set up separate route files for different resources:
     * Authentication routes
     * Article routes
     * Contact form routes
     * reCAPTCHA verification routes

6) Implement comprehensive error handling:
   - Create a central error handling middleware
   - Format error responses consistently
   - Include stack traces only in development mode
   - Handle different types of errors with appropriate status codes

7) Add a health check endpoint:
   - Create a simple endpoint to verify the API is running

The app.js file should be modular, well-commented, and follow Express best practices for organization and error handling. It should export the configured Express app for use in server.js.

******* prompt 12.2**************
***end*********

******* prompt 12.3**************
title: Configure MariaDB for Express application
***start********

Create a robust database configuration for an Express application using MariaDB with the following features:

1) Set up the database connection:
   - Use mysql2/promise for async/await support
   - Create a connection pool for better performance
   - Implement proper error handling for connection failures
   - Configure connection parameters from environment variables

2) Create SQL initialization scripts:
   - Define table schemas with appropriate data types and constraints
   - Set up foreign key relationships between tables
   - Create indexes for frequently queried columns
   - Add default values and validation where appropriate

3) Implement model classes:
   - Create class-based models for each entity (User, Article, etc.)
   - Implement static methods for CRUD operations
   - Add validation and data transformation methods
   - Use prepared statements to prevent SQL injection

4) Handle relationships between entities:
   - Implement JOIN queries for related data
   - Create methods to fetch related entities
   - Maintain referential integrity with foreign keys

5) Implement transaction support:
   - Add methods for operations that require transactions
   - Ensure proper error handling and rollback on failure
   - Maintain data consistency across related tables

The database configuration should be modular, secure, and follow best practices for SQL database design and access patterns.

******* prompt 12.3**************
***end*********


